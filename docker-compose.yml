services:
  ravenchain:
    build: 
      context: .
      target: core
    volumes:
      - .:/app
      - blockchain_data:/app/data
      - logs:/app/logs
    environment:
      - ENVIRONMENT=development
      - DEBUG=1
      - RAVENCHAIN_DATA_DIR=/app/data
      - RAVENCHAIN_LOGS_DIR=/app/logs
      - MINING_DIFFICULTY=2
      - LOG_LEVEL=DEBUG
      - LOG_JSON=1
    command: python main.py
    tty: true          # Allocate a pseudo-TTY
    stdin_open: true   # Keep STDIN open
    restart: unless-stopped

  api:
    build: 
      context: .
      dockerfile: Dockerfile
      target: api
    volumes:
      - .:/app
      - logs:/app/logs
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=1
      - RAVENCHAIN_DB_HOST=db
      - RAVENCHAIN_DB_PORT=5432
      - RAVENCHAIN_DB_NAME=ravenchain
      - RAVENCHAIN_DB_USER=postgres
      - RAVENCHAIN_DB_PASS=admin
      - RAVENCHAIN_LOGS_DIR=/app/logs
      - LOG_LEVEL=DEBUG
      - LOG_JSON=1
      - CORS_ORIGINS=http://localhost:3000
      - MAX_WORKERS=4
    command: uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload --workers 4
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      db:
        condition: service_healthy
      ravenchain:
        condition: service_started

  db:
    image: postgres:17-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=ravenchain
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  blockchain_data:
  logs:
  postgres_data:
